class GoogleMaps.Custom.Map
  # _.extend @prototype, Backbone.Events

  zoom: 15

  constructor: (lat, lng, options={})->
    @vent = options.vent
    @_buildMap(lat, lng)
    @_setHomeMarker(lat, lng)

  setView: (lat, lng)->
    @map.panTo new google.maps.LatLng(lat, lng)
    @map.setZoom @zoom
    @_setHomeMarker(lat, lng)

  createMarker: (latitude, longitude, options={})->
    marker_options = _.defaults(options,
      position: new google.maps.LatLng(latitude, longitude)
    )
    marker = new google.maps.Marker(marker_options)
    marker

  showMarker: (marker)->
    marker.setMap(@map)

  removeMarker: (marker)->
    marker.setMap(null)
    marker = null

  bindPopup: (marker, content)->
    infowindow = new google.maps.InfoWindow(content: content)
    google.maps.event.addListener(marker, 'click', ->
      infowindow.open(@map, marker)
    )

  _buildMap: (latitude, longitude)->
    @map = new google.maps.Map(document.getElementById('map-canvas'),
      center: new google.maps.LatLng(latitude, longitude)
    )
    @map.setZoom(@zoom)

  _setHomeMarker: (latitude, longitude)->
    @removeMarker(@home_marker) if @home_marker?
    home_marker = @createMarker(latitude, longitude, draggable: true)
    @showMarker(home_marker)
    @_setHomeMarkerListeners(home_marker)
    @home_marker = home_marker
    @_points([])

  _setHomeMarkerListeners: (home_marker)->
    that = this
    map = @map
    infowindow = new google.maps.InfoWindow(content: "You are here")
    google.maps.event.addListener(home_marker, 'click', ->
      infowindow.open(map, home_marker)
    )
    google.maps.event.addListener(home_marker, 'dragend', ->
      pos = home_marker.getPosition()
      that.vent.trigger 'Map:home_marker:dragend', pos.lat(), pos.lng()
    )

  _createNumericIcon: (number)->
    img_path = "assets/map_icons/number_#{number}.png"
    { url: img_path }

  _points: (latLng=false)->
     if latLng then @__points = latLng else @__points ?= []

  addPoint: (lat, lng)->
    latLng = new google.maps.LatLng(lat, lng)
    @_points().push(latLng)

  zoomToFitMarkers: ->
    markerBounds = new google.maps.LatLngBounds
    if @_points().length > 0 then markerBounds.extend(latLng) for latLng in @_points()

    @map.fitBounds(markerBounds)

    radius = @_calcFurthestFromHome()
    homeLatLng = @home_marker.getPosition()
    @_drawCircle(homeLatLng, radius)

  _calcFurthestFromHome: ->
    homeLatLng = @home_marker.getPosition()
    furthest_distance = 0
    for point in @_points()
      distance = @_calcDistanceBetween(homeLatLng, point)
      furthest_distance = distance unless furthest_distance > distance
    furthest_distance

  _calcDistanceBetween: (latLngA, latLngB)->
    google.maps.geometry.spherical.computeDistanceBetween(latLngA, latLngB)

  _drawCircle: (latLng, radius) ->
    options =
      strokeColor: '#0000FF'
      strokeOpacity: 0.8
      strokeWeight: 2
      fillColor: '#0000FF'
      fillOpacity: 0.35
      map: @map
      center: latLng
      radius: radius
    @_circle.setMap(null) if @_circle?
    @_circle = new google.maps.Circle(options);